package home.thienph.xyahoo.utils;

import java.io.UnsupportedEncodingException;

public final class Base64Encoder {
    private static final byte[] STANDARD_BASE64_ALPHABET = new byte[]{65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 43, 47};
    private static final byte[] URL_SAFE_BASE64_ALPHABET;
    private static final byte[] ORDERED_BASE64_ALPHABET;

    static {
        byte[] byArray = new byte[127];
        byArray[0] = -9;
        byArray[1] = -9;
        byArray[2] = -9;
        byArray[3] = -9;
        byArray[4] = -9;
        byArray[5] = -9;
        byArray[6] = -9;
        byArray[7] = -9;
        byArray[8] = -9;
        byArray[9] = -5;
        byArray[10] = -5;
        byArray[11] = -9;
        byArray[12] = -9;
        byArray[13] = -5;
        byArray[14] = -9;
        byArray[15] = -9;
        byArray[16] = -9;
        byArray[17] = -9;
        byArray[18] = -9;
        byArray[19] = -9;
        byArray[20] = -9;
        byArray[21] = -9;
        byArray[22] = -9;
        byArray[23] = -9;
        byArray[24] = -9;
        byArray[25] = -9;
        byArray[26] = -9;
        byArray[27] = -9;
        byArray[28] = -9;
        byArray[29] = -9;
        byArray[30] = -9;
        byArray[31] = -9;
        byArray[32] = -5;
        byArray[33] = -9;
        byArray[34] = -9;
        byArray[35] = -9;
        byArray[36] = -9;
        byArray[37] = -9;
        byArray[38] = -9;
        byArray[39] = -9;
        byArray[40] = -9;
        byArray[41] = -9;
        byArray[42] = -9;
        byArray[43] = 62;
        byArray[44] = -9;
        byArray[45] = -9;
        byArray[46] = -9;
        byArray[47] = 63;
        byArray[48] = 52;
        byArray[49] = 53;
        byArray[50] = 54;
        byArray[51] = 55;
        byArray[52] = 56;
        byArray[53] = 57;
        byArray[54] = 58;
        byArray[55] = 59;
        byArray[56] = 60;
        byArray[57] = 61;
        byArray[58] = -9;
        byArray[59] = -9;
        byArray[60] = -9;
        byArray[61] = -1;
        byArray[62] = -9;
        byArray[63] = -9;
        byArray[64] = -9;
        byArray[66] = 1;
        byArray[67] = 2;
        byArray[68] = 3;
        byArray[69] = 4;
        byArray[70] = 5;
        byArray[71] = 6;
        byArray[72] = 7;
        byArray[73] = 8;
        byArray[74] = 9;
        byArray[75] = 10;
        byArray[76] = 11;
        byArray[77] = 12;
        byArray[78] = 13;
        byArray[79] = 14;
        byArray[80] = 15;
        byArray[81] = 16;
        byArray[82] = 17;
        byArray[83] = 18;
        byArray[84] = 19;
        byArray[85] = 20;
        byArray[86] = 21;
        byArray[87] = 22;
        byArray[88] = 23;
        byArray[89] = 24;
        byArray[90] = 25;
        byArray[91] = -9;
        byArray[92] = -9;
        byArray[93] = -9;
        byArray[94] = -9;
        byArray[95] = -9;
        byArray[96] = -9;
        byArray[97] = 26;
        byArray[98] = 27;
        byArray[99] = 28;
        byArray[100] = 29;
        byArray[101] = 30;
        byArray[102] = 31;
        byArray[103] = 32;
        byArray[104] = 33;
        byArray[105] = 34;
        byArray[106] = 35;
        byArray[107] = 36;
        byArray[108] = 37;
        byArray[109] = 38;
        byArray[110] = 39;
        byArray[111] = 40;
        byArray[112] = 41;
        byArray[113] = 42;
        byArray[114] = 43;
        byArray[115] = 44;
        byArray[116] = 45;
        byArray[117] = 46;
        byArray[118] = 47;
        byArray[119] = 48;
        byArray[120] = 49;
        byArray[121] = 50;
        byArray[122] = 51;
        byArray[123] = -9;
        byArray[124] = -9;
        byArray[125] = -9;
        byArray[126] = -9;
        URL_SAFE_BASE64_ALPHABET = new byte[]{65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 45, 95};
        byte[] byArray2 = new byte[127];
        byArray2[0] = -9;
        byArray2[1] = -9;
        byArray2[2] = -9;
        byArray2[3] = -9;
        byArray2[4] = -9;
        byArray2[5] = -9;
        byArray2[6] = -9;
        byArray2[7] = -9;
        byArray2[8] = -9;
        byArray2[9] = -5;
        byArray2[10] = -5;
        byArray2[11] = -9;
        byArray2[12] = -9;
        byArray2[13] = -5;
        byArray2[14] = -9;
        byArray2[15] = -9;
        byArray2[16] = -9;
        byArray2[17] = -9;
        byArray2[18] = -9;
        byArray2[19] = -9;
        byArray2[20] = -9;
        byArray2[21] = -9;
        byArray2[22] = -9;
        byArray2[23] = -9;
        byArray2[24] = -9;
        byArray2[25] = -9;
        byArray2[26] = -9;
        byArray2[27] = -9;
        byArray2[28] = -9;
        byArray2[29] = -9;
        byArray2[30] = -9;
        byArray2[31] = -9;
        byArray2[32] = -5;
        byArray2[33] = -9;
        byArray2[34] = -9;
        byArray2[35] = -9;
        byArray2[36] = -9;
        byArray2[37] = -9;
        byArray2[38] = -9;
        byArray2[39] = -9;
        byArray2[40] = -9;
        byArray2[41] = -9;
        byArray2[42] = -9;
        byArray2[43] = -9;
        byArray2[44] = -9;
        byArray2[45] = 62;
        byArray2[46] = -9;
        byArray2[47] = -9;
        byArray2[48] = 52;
        byArray2[49] = 53;
        byArray2[50] = 54;
        byArray2[51] = 55;
        byArray2[52] = 56;
        byArray2[53] = 57;
        byArray2[54] = 58;
        byArray2[55] = 59;
        byArray2[56] = 60;
        byArray2[57] = 61;
        byArray2[58] = -9;
        byArray2[59] = -9;
        byArray2[60] = -9;
        byArray2[61] = -1;
        byArray2[62] = -9;
        byArray2[63] = -9;
        byArray2[64] = -9;
        byArray2[66] = 1;
        byArray2[67] = 2;
        byArray2[68] = 3;
        byArray2[69] = 4;
        byArray2[70] = 5;
        byArray2[71] = 6;
        byArray2[72] = 7;
        byArray2[73] = 8;
        byArray2[74] = 9;
        byArray2[75] = 10;
        byArray2[76] = 11;
        byArray2[77] = 12;
        byArray2[78] = 13;
        byArray2[79] = 14;
        byArray2[80] = 15;
        byArray2[81] = 16;
        byArray2[82] = 17;
        byArray2[83] = 18;
        byArray2[84] = 19;
        byArray2[85] = 20;
        byArray2[86] = 21;
        byArray2[87] = 22;
        byArray2[88] = 23;
        byArray2[89] = 24;
        byArray2[90] = 25;
        byArray2[91] = -9;
        byArray2[92] = -9;
        byArray2[93] = -9;
        byArray2[94] = -9;
        byArray2[95] = 63;
        byArray2[96] = -9;
        byArray2[97] = 26;
        byArray2[98] = 27;
        byArray2[99] = 28;
        byArray2[100] = 29;
        byArray2[101] = 30;
        byArray2[102] = 31;
        byArray2[103] = 32;
        byArray2[104] = 33;
        byArray2[105] = 34;
        byArray2[106] = 35;
        byArray2[107] = 36;
        byArray2[108] = 37;
        byArray2[109] = 38;
        byArray2[110] = 39;
        byArray2[111] = 40;
        byArray2[112] = 41;
        byArray2[113] = 42;
        byArray2[114] = 43;
        byArray2[115] = 44;
        byArray2[116] = 45;
        byArray2[117] = 46;
        byArray2[118] = 47;
        byArray2[119] = 48;
        byArray2[120] = 49;
        byArray2[121] = 50;
        byArray2[122] = 51;
        byArray2[123] = -9;
        byArray2[124] = -9;
        byArray2[125] = -9;
        byArray2[126] = -9;
        ORDERED_BASE64_ALPHABET = new byte[]{45, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122};
        byte[] byArray3 = new byte[127];
        byArray3[0] = -9;
        byArray3[1] = -9;
        byArray3[2] = -9;
        byArray3[3] = -9;
        byArray3[4] = -9;
        byArray3[5] = -9;
        byArray3[6] = -9;
        byArray3[7] = -9;
        byArray3[8] = -9;
        byArray3[9] = -5;
        byArray3[10] = -5;
        byArray3[11] = -9;
        byArray3[12] = -9;
        byArray3[13] = -5;
        byArray3[14] = -9;
        byArray3[15] = -9;
        byArray3[16] = -9;
        byArray3[17] = -9;
        byArray3[18] = -9;
        byArray3[19] = -9;
        byArray3[20] = -9;
        byArray3[21] = -9;
        byArray3[22] = -9;
        byArray3[23] = -9;
        byArray3[24] = -9;
        byArray3[25] = -9;
        byArray3[26] = -9;
        byArray3[27] = -9;
        byArray3[28] = -9;
        byArray3[29] = -9;
        byArray3[30] = -9;
        byArray3[31] = -9;
        byArray3[32] = -5;
        byArray3[33] = -9;
        byArray3[34] = -9;
        byArray3[35] = -9;
        byArray3[36] = -9;
        byArray3[37] = -9;
        byArray3[38] = -9;
        byArray3[39] = -9;
        byArray3[40] = -9;
        byArray3[41] = -9;
        byArray3[42] = -9;
        byArray3[43] = -9;
        byArray3[44] = -9;
        byArray3[46] = -9;
        byArray3[47] = -9;
        byArray3[48] = 1;
        byArray3[49] = 2;
        byArray3[50] = 3;
        byArray3[51] = 4;
        byArray3[52] = 5;
        byArray3[53] = 6;
        byArray3[54] = 7;
        byArray3[55] = 8;
        byArray3[56] = 9;
        byArray3[57] = 10;
        byArray3[58] = -9;
        byArray3[59] = -9;
        byArray3[60] = -9;
        byArray3[61] = -1;
        byArray3[62] = -9;
        byArray3[63] = -9;
        byArray3[64] = -9;
        byArray3[65] = 11;
        byArray3[66] = 12;
        byArray3[67] = 13;
        byArray3[68] = 14;
        byArray3[69] = 15;
        byArray3[70] = 16;
        byArray3[71] = 17;
        byArray3[72] = 18;
        byArray3[73] = 19;
        byArray3[74] = 20;
        byArray3[75] = 21;
        byArray3[76] = 22;
        byArray3[77] = 23;
        byArray3[78] = 24;
        byArray3[79] = 25;
        byArray3[80] = 26;
        byArray3[81] = 27;
        byArray3[82] = 28;
        byArray3[83] = 29;
        byArray3[84] = 30;
        byArray3[85] = 31;
        byArray3[86] = 32;
        byArray3[87] = 33;
        byArray3[88] = 34;
        byArray3[89] = 35;
        byArray3[90] = 36;
        byArray3[91] = -9;
        byArray3[92] = -9;
        byArray3[93] = -9;
        byArray3[94] = -9;
        byArray3[95] = 37;
        byArray3[96] = -9;
        byArray3[97] = 38;
        byArray3[98] = 39;
        byArray3[99] = 40;
        byArray3[100] = 41;
        byArray3[101] = 42;
        byArray3[102] = 43;
        byArray3[103] = 44;
        byArray3[104] = 45;
        byArray3[105] = 46;
        byArray3[106] = 47;
        byArray3[107] = 48;
        byArray3[108] = 49;
        byArray3[109] = 50;
        byArray3[110] = 51;
        byArray3[111] = 52;
        byArray3[112] = 53;
        byArray3[113] = 54;
        byArray3[114] = 55;
        byArray3[115] = 56;
        byArray3[116] = 57;
        byArray3[117] = 58;
        byArray3[118] = 59;
        byArray3[119] = 60;
        byArray3[120] = 61;
        byArray3[121] = 62;
        byArray3[122] = 63;
        byArray3[123] = -9;
        byArray3[124] = -9;
        byArray3[125] = -9;
        byArray3[126] = -9;
    }

    private static byte[] encode3BytesTo4(byte[] byArray, int n, int n2, byte[] byArray2, int n3, int n4) {
        byte[] byArray3 = (n4 & 0x10) == 16 ? URL_SAFE_BASE64_ALPHABET : ((n4 & 0x20) == 32 ? ORDERED_BASE64_ALPHABET : STANDARD_BASE64_ALPHABET);
        int n5 = (n2 > 0 ? byArray[n] << 24 >>> 8 : 0) | (n2 > 1 ? byArray[n + 1] << 24 >>> 16 : 0) | (n2 > 2 ? byArray[n + 2] << 24 >>> 24 : 0);
        switch (n2) {
            case 3: {
                byArray2[n3] = byArray3[n5 >>> 18];
                byArray2[n3 + 1] = byArray3[n5 >>> 12 & 0x3F];
                byArray2[n3 + 2] = byArray3[n5 >>> 6 & 0x3F];
                byArray2[n3 + 3] = byArray3[n5 & 0x3F];
                return byArray2;
            }
            case 2: {
                byArray2[n3] = byArray3[n5 >>> 18];
                byArray2[n3 + 1] = byArray3[n5 >>> 12 & 0x3F];
                byArray2[n3 + 2] = byArray3[n5 >>> 6 & 0x3F];
                byArray2[n3 + 3] = 61;
                return byArray2;
            }
            case 1: {
                byArray2[n3] = byArray3[n5 >>> 18];
                byArray2[n3 + 1] = byArray3[n5 >>> 12 & 0x3F];
                byArray2[n3 + 2] = 61;
                byArray2[n3 + 3] = 61;
                return byArray2;
            }
        }
        return byArray2;
    }

    private static String encodeToBase64String(byte[] byArray, int n, int n2, int n3) {
        n = (n2 << 2) / 3;
        byte[] byArray2 = new byte[n + (n2 % 3 > 0 ? 4 : 0) + n / 76];
        n3 = 0;
        int n4 = 0;
        int n5 = n2 - 2;
        int n6 = 0;
        while (n3 < n5) {
            Base64Encoder.encode3BytesTo4(byArray, n3, 3, byArray2, n4, 0);
            if ((n6 += 4) == 76) {
                byArray2[n4 + 4] = 10;
                ++n4;
                n6 = 0;
            }
            n3 += 3;
            n4 += 4;
        }
        if (n3 < n2) {
            Base64Encoder.encode3BytesTo4(byArray, n3, n2 - n3, byArray2, n4, 0);
            n4 += 4;
        }
        try {
            return new String(byArray2, 0, n4, "UTF-8");
        }
        catch (UnsupportedEncodingException unsupportedEncodingException) {
            return new String(byArray2, 0, n4);
        }
    }

   public static String encodeAndReverse(String var0) {
      byte[] var5;
      String var6;
      char[] var1 = (var6 = encodeToBase64String(var5 = var0.getBytes(), 0, var5.length, 0)).toCharArray();
      int var2 = var6.length() - 1;
      int var7 = var6.length() / 2;

      for (int var4 = 0; var4 < var7; var4++) {
         char var3 = var1[var4];
         var1[var4] = var1[var2 - var4];
         var1[var2 - var4] = var3;
      }

      return new String(var1);
   }
}
